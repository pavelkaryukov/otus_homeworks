#include "matrix.h"
#include <gtest/gtest.h> // googletest header file

void FillMatrixTest(Matrix<int, -1>& aMatrix) {
    aMatrix[1][1] = 12;
    aMatrix[1][2] = 22;
    aMatrix[1][3] = 32;
    aMatrix[1][4] = 42;
}

TEST(test_matrix, Operators) {
    Matrix <int, 0> matrix;
    ++matrix[100][100];
    ++matrix[100][100];
    int a1 = matrix[100][100];
    ASSERT_EQ(matrix.size(), 1);
    ASSERT_EQ(a1, 2);

    --matrix[100][100];
    --matrix[100][100];
    int a2= matrix[100][100];
    ASSERT_EQ(matrix.size(), 0);
    ASSERT_EQ(a2, 0);
    //TODO:: Написать тест проверяющий работоспособность всех операторов
}

TEST(test_matrix, AddElement) {
    Matrix<int, -1> matrix;
    FillMatrixTest(matrix);
    ASSERT_EQ(matrix.size(), 4);
}

TEST(test_matrix, EraseElement) {
    Matrix<int, -1> matrix;
    FillMatrixTest(matrix);
    ASSERT_EQ(matrix.size(), 4);
    matrix[1][1] = -1;
    ASSERT_EQ(matrix.size(), 3);
}

TEST(test_matrix, CanonicalAssignmentOperator) {
    Matrix<int, -1> matrix;
    ((((matrix[100][2] = 8) = -1) = 8) = 0) = 3;
    ASSERT_EQ(matrix[100][2], 3);
}

TEST(test_matrix, DetourMatrix) {
    Matrix<int, -1> matrix;
    FillMatrixTest(matrix);
    testing::internal::CaptureStdout();
    for (auto[x, y, v] : matrix) {
        std::cout<< x << y << v;
    }
    std::string outputStr = testing::internal::GetCapturedStdout();
    
    const std::string testStr = "1112122213321442";
    ASSERT_EQ(outputStr, testStr);
}

TEST(test_matrix, InfinityMatrix) {
    Matrix<int, 0> matrix;
    matrix[std::vector<std::uint8_t>{0xbc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}][std::vector<std::uint8_t>{0xf3, 0xf2, 0xf1, 0xff, 0xf5, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}] = 11;
    matrix[std::vector<std::uint8_t>{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}][std::vector<std::uint8_t>{0xf3, 0xf2, 0xf1, 0xff, 0xf5, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}] = 22;
    matrix[std::vector<std::uint8_t>{0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}][std::vector<std::uint8_t>{0xf3, 0xf2, 0xf1, 0xff, 0xf5, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}] = 6;
    ASSERT_EQ(matrix.size(), 2);
    matrix[std::vector<std::uint8_t>{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}][std::vector<std::uint8_t>{0xf3, 0xf2, 0xf1, 0xff, 0xf5, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}] = 0;
    matrix[std::vector<std::uint8_t>{0xbc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}][std::vector<std::uint8_t>{0xf3, 0xf2, 0xf1, 0xff, 0xf5, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}] = 0;
    ASSERT_EQ(matrix.size(), 0);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
    return 0;
}